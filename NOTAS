escritura en python (en formato .dlib) -> compilador -> .dla

* Continuar trabajo de funcion construct opcional
* Registro de fallas
* Garbage collector de archivos residuales viejos
* Trabajar en funcion Tree (devuelve en forma de arbol los bloques y segmentos de una libreria)

.dlib (texto plano) -> .dla (estructurado listo para ejecutar)

Estructura:

DinamycLibraries/
	-> LibsCompiler/
		-> __init__.py
		-> DLA.py
			* deconstruct() ※
			* delete_cache() ※
			* saveFile() ※
			* read
				* segment() ※
				* block() ※
			* write() ※
			* headers
				* set() ※
				* get() ※
		-> HDLA.py
		-> Compile.py
			* debug() ※
			* run()
		-> SystemAlerts.py
			* deploy() ※
		-> client_test.py
			* line_to_structure() ※
			* structure_to_line() ※
		-> prompt.py
			* cin() ※
		-> EncryptX/
	-> __init__.py


** PROTOCOLO EN DESAROLLO **
Mensaje de protocolo DLAPP

1 caracter -> 1 byte -> 8 bits

Minusculas 	(0110)
a 01100001	b 01100010	 c 01100011
d 01100100	e 01100101	 f 01100110

Mayusculas	(0100)
A 01000001	B 01000010	 C 01000011
D 01000100	E 01000101	 F 01000110

Numeros		(0011)
1 00110001	2 00110010	 3 00110011
4 00110100	3 00110101	 4 00110110

Simbolos	(0010)
# 00100011


4 bytes de direccion	->	32		bits
1 byte de permiso		->	8 		bits
512 bytes de mensaje 	->	4096	bits

*** Añadir registro de libro mayor
	- header name es el nombre de la libreria en el registro
	- cada vez que una libreria se mueda de directorio se debe ejecutar el "registra" para
	  actualizar los datos en el registro mayor

*** Las DLA podran almacenar archivos de imagenes en forma de enlaces


** HDLA son el enlace entre DLAs y sus funciones para uso del desarollador **